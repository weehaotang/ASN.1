package javacc;
/* Generated By:JJTree: Do not edit this line. ASTElementType.java */

public class ASTElementType extends SimpleNode {
	protected boolean implicit = false;
	protected boolean explicit = false;
	protected boolean optional = false;

	private String[] classes = {
		"UNIVERSAL",
		"CONTEXT",
		"APPLICATION",
		"PRIVATE"
	};

	/**
	 * Returns the name of this structured type element.
	 *<p>
	 * For now, assuming the first identifier child found contains
	 * the name;
	 */
	public String
	getName()
	{
		int numChildren = jjtGetNumChildren();
		for(int i = 0; i < numChildren; i++)
		{
			SimpleNode n = (SimpleNode)jjtGetChild(i);
			if(n instanceof ASTidentifier)
			{
				return n.first_token.image;
			}
		}

		return "ElementType: could not find name!";
	}

	/**
	 * Returns the class name to use for declarations of this
	 * structured type element.
	 *<p>
	 * This assumes there will be a child node of type BuiltinType
	 * or DefinedType.
	 */
	public String
	getClassName()
	{
		int numChildren = jjtGetNumChildren();
		for(int i = 0; i < numChildren; i++)
		{
			SimpleNode n = (SimpleNode)jjtGetChild(i);
			if(n instanceof ASTBuiltinType)
			{
				return ((ASTBuiltinType)n).getClassName();
			}
			if(n instanceof ASTDefinedType)
			{
				return ((ASTDefinedType)n).getClassName();
			}
		}

		return "ElementType: could not find class name!";
	}

	public void
	setOptional(boolean optional)
	{
		this.optional = optional;
	}

	public boolean
	isOptional()
	{
		return optional;
	}

	/**
	 * If one of this node's children is a TAGGED builtin type, there is tagging
	 * information present.
	 */
	public boolean
	isTagged()
	{
		int numChildren = jjtGetNumChildren();
		for(int i = 0; i < numChildren; i++)
		{
			SimpleNode n = (SimpleNode)jjtGetChild(i);
			if(n instanceof ASTBuiltinType)
				return ((ASTBuiltinType)n).isTagged();
		}

		return false;
	}

	public int
	getTaggingMethod()
	{
		int numChildren = jjtGetNumChildren();
		for(int i = 0; i < numChildren; i++)
		{
			SimpleNode n = (SimpleNode)jjtGetChild(i);
			if(n instanceof ASTBuiltinType)
				return ((ASTBuiltinType)n).getTaggingMethod();
		}

		// the module default tagging method should be checked here
		System.err.println("ASTElementType.getTaggingMethod: The module default tagging method should have been checked!");
		return ASTTaggedType.IMPLICIT;
	}

	public int
	getTagClass()
	{
		int numChildren = jjtGetNumChildren();
		for(int i = 0; i < numChildren; i++)
		{
			SimpleNode n = (SimpleNode)jjtGetChild(i);
			if(n instanceof ASTBuiltinType)
				return ((ASTBuiltinType)n).getTagClass();
		}

		return ASTTaggedType.CONTEXT;
	}

	public int
	getTagNumber()
	{
		int numChildren = jjtGetNumChildren();
		for(int i = 0; i < numChildren; i++)
		{
			SimpleNode n = (SimpleNode)jjtGetChild(i);
			if(n instanceof ASTBuiltinType)
				return ((ASTBuiltinType)n).getTagNumber();
		}

		return 0;
	}

  public ASTElementType(int id) {
    super(id);
  }

  public ASTElementType(AsnParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(AsnParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}

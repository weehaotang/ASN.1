package javacc;
/* Generated By:JJTree: Do not edit this line. ASTDefinedType.java */
import java.io.*;
import java.util.*;

public class ASTDefinedType extends SimpleNode {

	/**
	 * Assumes there is child of type "typereference".
	 */
	public String
	getClassName()
	{
		for(int i = 0; i < jjtGetNumChildren(); i++)
		{
			Node n = jjtGetChild(i);
			if(n instanceof ASTtypereference != true)
				continue;

			return ((ASTtypereference)n).getClassName().replace('-','_');
		}

		return null;
	}

	public String
	getType()
	{
		for(int i = 0; i < jjtGetNumChildren(); i++)
		{
			Node n = jjtGetChild(i);
			if(n instanceof ASTtypereference != true)
				continue;

			return ((SimpleNode)n).first_token.image.replace('-', '_'); 
		}

		return null;
	}

	public void
	createClass(String name)
	{
		//added by fatih Batuk
		name = name.replace('-','_');
		
		try
		{
			String templateName = "definedtype.template";		//added by Fatih Batuk
			String filename = null;
			if(AsnParser.outputDirectory != null)
				filename = new String(AsnParser.outputDirectory + System.getProperty("file.separator") + name + ".java");
			else
				filename = new String(name + ".java");

			OutputStream os = new FileOutputStream(filename);
			BufferedReader reader = new BufferedReader(new FileReader(templateName));		//modified by Fatih Batuk
			String line;
			while(true)
			{
				line = reader.readLine();
				if(line == null)
					break;

				int idx = line.indexOf('@');
				while(idx != -1)
				{
					System.out.println(line);
					int ndx = line.indexOf('@', idx + 1);
					if(ndx == -1)
						break;

					String directive = line.substring(idx + 1, ndx);
					if(directive.equals("name"))	// replace with the class name
					{
						String left = line.substring(0, idx);
						String right = line.substring(ndx + 1);
						line = new String(left + name + right);
						continue;
					}

					if(directive.equals("package"))	// insert a list of declarations
					{
						if(AsnParser.outputPackage != null)
							line = new String("package " + AsnParser.outputPackage + ";");
						else
							line = "";

						continue;
					}

					if(directive.equals("baseclass"))	// replace with the base class name
					{
						String left = line.substring(0, idx);
						String right = line.substring(ndx + 1);
						line = new String(left + getClassName() + right);
						continue;
					}

					idx = line.indexOf('@');
				}

				os.write(line.getBytes());
				os.write(0x0a);
				os.flush();
			}
		}
		catch(Exception e)
		{
		}
	}

  public ASTDefinedType(int id) {
    super(id);
  }

  public ASTDefinedType(AsnParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(AsnParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}

package javacc;

import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.OutputStream;
import java.util.Vector;

/* Generated By:JJTree: Do not edit this line. ASTTaggedType.java */

public class ASTTaggedType extends SimpleNode {

	public static final int IMPLICIT = 0;
	public static final int EXPLICIT = 1;

	public static final int CONTEXT = 0;
	public static final int UNIVERSAL = 1;
	public static final int APPLICATION = 2;
	public static final int PRIVATE = 3;

	private int tm = IMPLICIT;

	public void
	setTaggingMethod(int tm)
	{
		this.tm = tm;
	}

	public int
	getTaggingMethod()
	{
		return tm;
	}

	public int
	getTagNumber()
	{
		int numChildren = jjtGetNumChildren();
		for(int i = 0; i < numChildren; i++)
		{
			SimpleNode n = (SimpleNode)jjtGetChild(i);
			if(n instanceof ASTTag)
				return ((ASTTag)n).getTagNumber();
		}

		return -1;
	}

	public int
	getTagClass()
	{
		int numChildren = jjtGetNumChildren();
		for(int i = 0; i < numChildren; i++)
		{
			SimpleNode n = (SimpleNode)jjtGetChild(i);
			if(n instanceof ASTTag)
				return ((ASTTag)n).getTagClass();
		}

		return ASTTaggedType.CONTEXT;
	}

	public String
	getClassName()
	{
		for(int i = 0; i < jjtGetNumChildren(); i++)
		{
			Node n = jjtGetChild(i);
			if(n instanceof ASTDefinedType == true)
			{
				return ((ASTDefinedType)n).getClassName();
			}

			if(n instanceof ASTBuiltinType == true)
			{
				return ((ASTBuiltinType)n).getClassName();
			}
		}

		return null;
	}
	

  public ASTTaggedType(int id) {
    super(id);
  }

  public ASTTaggedType(AsnParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(AsnParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}

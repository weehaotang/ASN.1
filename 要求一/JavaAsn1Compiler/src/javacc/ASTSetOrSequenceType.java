package javacc;
/* Generated By:JJTree: Do not edit this line. ASTSetOrSequenceType.java */
import java.io.*;
import java.util.*;

public class ASTSetOrSequenceType extends SimpleNode {
	public static final int SEQUENCE = 0;
	public static final int SET = 1;
	protected int type;

	protected void
	setType(int seq)
	{
		type = seq;
	}

	protected boolean
	isSequence()
	{
		if(type == SEQUENCE)
			return true;

		return false;
	}

	protected boolean
	isSet()
	{
		if(type == SEQUENCE)
			return false;

		return true;
	}

	public String
	toString()
	{
		if(type == SEQUENCE)
			return "SEQUENCE";

		return "SET";
	}

	/**
	 * Creates the source file for the named class, extending either the Set
	 * or Sequence class.
	 *<p>
	 * This method must read through the elements of the set or sequence and
	 * create attributes in the class being generated for each. It must also
	 * create a setUpElements method that sets all the tagging information.
	 *
	 */
	public void
	generateClass(String name)
	{
		try
		{
			String filename = null;
			if(AsnParser.outputDirectory != null)
				filename = new String(AsnParser.outputDirectory + System.getProperty("file.separator") + name + ".java");
			else
				filename = new String(name + ".java");

			OutputStream os = new FileOutputStream(filename);
			String templateName;

			if(isSet() == true)
			{
				templateName = "set.template";
			}
			else
			{
				templateName = "sequence.template";
			}

			BufferedReader reader = new BufferedReader(new FileReader(templateName));		//modified by Fatih Batuk
			String line;
			while(true)
			{
				line = reader.readLine();
				if(line == null)
					break;

				int idx = line.indexOf('@');
				while(idx != -1)
				{
					int ndx = line.indexOf('@', idx + 1);
					if(ndx == -1)
						break;

					String directive = line.substring(idx + 1, ndx);
					if(directive.equals("name"))	// replace with the class name
					{
						String left = line.substring(0, idx);
						String right = line.substring(ndx + 1);
						line = new String(left + name + right);
						continue;
					}

					if(directive.equals("package"))	// insert a list of declarations
					{
						if(AsnParser.outputPackage != null)
							line = new String("package " + AsnParser.outputPackage + ";");
						else
							line = "";

						continue;
					}

					if(directive.equals("elements"))	// insert a list of declarations
					{
						String[] declarations = getElementDeclarations();
						for(int i = 0; i < declarations.length; i++)
						{
							os.write(declarations[i].getBytes());
							os.write(0x0a);
							os.flush();
						}

						line = "\t/* end of element declarations */";
						continue;
					}

					if(directive.equals("setupelements"))	// insert a list tagging setup statements
					{
						String[] setup = setupElements();
						for(int i = 0; i < setup.length; i++)
						{
							os.write(setup[i].getBytes());
							os.write(0x0a);
							os.flush();
						}

						line = "\t/* end of element setup */";
						continue;
					}

					if(directive.equals("accessor"))	// insert a list tagging setup statements
					{
						//accessor methods are removed by Fatih Batuk
					/*  String[] methods = createAccessors();		
						for(int i = 0; i < methods.length; i++)
						{
							os.write(methods[i].getBytes());
							os.write(0x0a);
							os.flush();
						}
			        */
			        //	line = "\t/* end of accessor methods */";
						line = "";
						continue;
					}
				}

				os.write(line.getBytes());
				os.write(0x0a);
				os.flush();
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	private String[]
	getElementDeclarations()
	{
		String eName;
		String eType;

		Vector decs = new Vector();

		int numChildren = jjtGetNumChildren();
		for(int i = 0; i < numChildren; i++)
		{
			Node n = jjtGetChild(i);
			if(n instanceof ASTElementType)
			{
				ASTElementType et = (ASTElementType)n;
				eName = et.getName();
				eName = eName.replace('-', '_');
				eType = et.getClassName();
				eType = eType.replace('-', '_');

				//Changed from private visibility to public visibility by Fatih Batuk
				String dec = new String("\tpublic " + eType + " " + eName + " = new " + eType + "(\"" + eName + "\");");
				decs.addElement(dec);
			}
		}

		if(decs.size() > 0)
		{
			String[] rc = new String[decs.size()];
			decs.toArray(rc);
			return rc;
		}

		return null;
	}

	private String[]
	setupElements()
	{
		String eName;
		String eType;

		Vector decs = new Vector();

		int numChildren = jjtGetNumChildren();
		for(int i = 0; i < numChildren; i++)
		{
			Node n = jjtGetChild(i);
			if(n instanceof ASTElementType)
			{
				ASTElementType et = (ASTElementType)n;
				eName = et.getName();
				eName = eName.replace('-', '_');
				eType = et.getClassName();
				eType = eType.replace('-', '_');

				/*
				 * For each element, check optional status, default value (later), tagging method, class and number
				 */

				decs.addElement(new String("\t\tsuper.addElement(" + eName + ");"));

				// optional status
				if(et.isOptional() == true)
				{
					decs.addElement(new String("\t\t" + eName + ".setOptional(true);"));
				}

				// tagging method
				if(et.isTagged() != true)
					continue;

				int tm = et.getTaggingMethod();
				if(tm == ASTTaggedType.EXPLICIT)
					decs.addElement(new String("\t\t" + eName + ".setTaggingMethod(Tag.EXPLICIT);")); 	//modified by Fatih Batuk (changed "ASN1Object" to word "Tag")
				else
					decs.addElement(new String("\t\t" + eName + ".setTaggingMethod(Tag.IMPLICIT);"));	//modified by Fatih Batuk (changed "ASN1Object" to word "Tag")

				// tag class
				int tc = et.getTagClass();
				switch(tc)
				{
					case ASTTaggedType.CONTEXT:
						decs.addElement(new String("\t\t" + eName + ".setTagClass(Tag.CONTEXT);"));		//modified by Fatih Batuk (changed "ASN1Object" to word "Tag")
						break;
					case ASTTaggedType.APPLICATION:
						decs.addElement(new String("\t\t" + eName + ".setTagClass(Tag.APPLICATION);"));	//modified by Fatih Batuk (changed "ASN1Object" to word "Tag")
						break;
					case ASTTaggedType.PRIVATE:
						decs.addElement(new String("\t\t" + eName + ".setTagClass(Tag.PRIVATE);"));		//modified by Fatih Batuk (changed "ASN1Object" to word "Tag")
						break;
				}

				// tag number
				int tn = et.getTagNumber();
				decs.addElement(new String("\t\t" + eName + ".setTagNumber(" + tn + ");"));
			}
		}

		if(decs.size() > 0)
		{
			String[] rc = new String[decs.size()];
			decs.toArray(rc);
			return rc;
		}

		return null;
	}

	private String[]
	createAccessors()
	{
		String eName;
		String eType;

		Vector decs = new Vector();

		int numChildren = jjtGetNumChildren();
		for(int i = 0; i < numChildren; i++)
		{
			Node n = jjtGetChild(i);
			if(n instanceof ASTElementType)
			{
				ASTElementType et = (ASTElementType)n;
				eName = et.getName();
				eName = eName.replace('-', '_');
				eType = et.getClassName();
				eType = eType.replace('-', '_');

				String dec = new String("\tpublic " + eType + "\n\tget" + eName + "()\n\t{\n\t\treturn " + eName + ";\n\t}\n");
				decs.addElement(dec);
				dec = new String("\tpublic void\n\tset" + eName + "(" + eType + " value)\n\t{\n\t\t" + eName + " = value;\n\t}\n");
				decs.addElement(dec);
			}
		}

		if(decs.size() > 0)
		{
			String[] rc = new String[decs.size()];
			decs.toArray(rc);
			return rc;
		}

		return null;
	}

  public ASTSetOrSequenceType(int id) {
    super(id);
  }

  public ASTSetOrSequenceType(AsnParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(AsnParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}
